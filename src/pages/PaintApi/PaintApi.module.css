.container {
    padding: 0 2rem 1rem;
}

.container h2 {
    display: inline-block;
    margin: 1.5rem 0 0;
    padding-bottom: 0.1em;
    color: #161718;
    text-decoration: underline;
    text-decoration-color: rgba(255, 0, 0, 0.4);
    text-decoration-thickness: 5px;
}

.container p {
    margin: 1rem 0;
    padding: 0;
}

.container textarea {
    box-sizing: border-box;
    background-color: rgb(73, 73, 73);
    border: 0.5rem solid black;
    color: white;
    font-size: 2.5rem;
    line-height: 1.5;
    padding: 0.125em 0.25em;
    width: calc(100% - 2rem);
}
.container textarea::placeholder {
    color: white;
}

/*
 * Define custom property for x position of svg underline as a number value to enable transition.
 * The @property rule represents a custom property registration directly in a stylesheet without
 * having to run any JS. Valid @property rules result in a registered custom property, as if
 * CSS.registerProperty had been called with equivalent parameters.
 * See: https://developer.mozilla.org/en-US/docs/Web/CSS/@property
*/
@property --svg-underline-pos {
    syntax: "<number>";
    inherits: false;
    initial-value: 0;
}

@supports (background-image: paint(something)) {
    .container h2 {
        text-decoration: none;
        /* paint worklet defined in ./static/paint.js */
        background-image: paint(svg-underline);
        /* set initial position */
        --svg-underline-pos: 33;
        /* use inside path */
        --svg-path: path(`M 0, 92 H var(--svg-underline-pos) `);
        --svg-stroke: rgba(255, 0, 0, 0.4);
        --svg-stroke-width: 25;
        /* animate it on hover */
        transition: --svg-stroke 1s ease-in-out, --svg-underline-pos 1s ease-in-out;
    }
    .container h2:hover {
        --svg-stroke: rgba(248, 7, 7, 0.8);
        --svg-underline-pos: 100;
    }

    .container textarea {
        background-color: none;
        background-image: paint(checkerboard);
    }
}
